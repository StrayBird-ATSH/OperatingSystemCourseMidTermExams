{\rtf1\ansi\deff0{\fonttbl{\f0 \fswiss Helvetica;}{\f1 Courier;}}
{\colortbl;\red255\green0\blue0;\red0\green0\blue255;}
\widowctrl\hyphauto

{\pard \qc \f0 \sa180 \li0 \fi0 \b \fs36 Winter 2017 Mid Term Solution\par}
{\pard \qc \f0 \sa180 \li0 \fi0  Chen Wang{\super\chftn}{\*\footnote\chftn\~\plain\pard {\pard \ql \f0 \sa180 \li0 \fi0 Undergraduate in Computer Engineering, Samueli School of Engineering, University of California, Irvine. ({\field{\*\fldinst{HYPERLINK "mailto:chenw23@uci.edu"}}{\fldrslt{\ul
chenw23@uci.edu
}}}
)\par}
}\par}
{\pard \qc \f0 \sa180 \li0 \fi0  11/8/2019\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Basic page tables.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Address Translation through an example\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (5 points) Illustrate organization of the x86, 4K, 32bit 2-level page tables through a simple example. Assume that the hardware translates the virtual address \u8217'0xc04005\u8217' (binary 0b1100 0000 0100 0000 0000 0101) into the physical address \u8217'0x55005\u8217'. The physical addresses of the page table directory and the page table (Level 2) involved in the translation of this virtual address are 0x8000 and 0x2000. Draw a diagram, provide a short explanation.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b {\i Reference Solution:}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Well, it should be simple. Just follow the diagram on page 65 of the slide {\field{\*\fldinst{HYPERLINK "https://www.ics.uci.edu/~aburtsev/143A/lectures/lecture10-kernel-page-table/lecture10-kernel-page-table.pdf"}}{\fldrslt{\ul
Lecture 10 - Kernel Page Table
}}}
. Fill in the actual address number and it should be OK.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 Shell\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b {\i This question is not covered in this midterm}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 OS isolation and protection\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 User vs.\u160?kernel isolation\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b {\i Reference Solution:}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Please refer to the Problem 3.1 of Midterm Fall 2017.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Page Flag Design\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (5 points) Imagine you have hardware that is identical to x86, but does not have a user bit in the page tables. What changes need to be made to xv6 to ensure isolation of the kernel from user-processes?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b {\i Reference Solution:}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We need to modify the MMU part. In this part, rather than directly looking up in the directory, we will check whether the address is greater than 2GB. If the address is greater than 2GB, then it must be from a system call. Otherwise, the system can raise a fault.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 OS organization.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Imagine you want to optimize xv6 to run a large number of very small processes. A realistic example can be a web server that implements a Facebook\u8217's login page\u8212-you have to isolate each user in its own process, otherwise a single exploit from any user reveals accounts of all users going through the login page, but at the same time each process is very small (it just sends out a simple HTML page). Entire logic of such web server program can fitin 2-3K of memory.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Page count\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (10 points) You start by analyzing the overheads involved into creating a process. How many pages of memory are allocated when xv6 creates a smallest process? Count both user-level and kernel resources.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b {\i Reference Solution:}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Since the process is small, we assume each part of the user-level program can fit in one page.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 For user-level: One for text, one for data, one for heap, one for stack. Totally at least 4. For kernel-level: 0 ~ 234MB, that is\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 234 * 1024 / 4\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \f1 ## [1] 59904\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Therefore, in total there should be 59908 pages.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Optimizing Suggestion\par}
{\pard \ql \f0 \sa180 \li0 \fi0 (10 points) Suggest a set of changes to xv6 aimed at minimizing the number of pages that are required for creating very small processes, e.g., the once that are 1K in size.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 {\b {\i Reference Solution:}}\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Carefully analyze what system calls are used by these web page processes. Then in the mapped kernel space, omit out the functions that are not used by these small programs. It should be common that the small programs should only use limited functions of the system - otherwise, they won\u8217't be small.\par}
}
